[
["using-r-reproducibly.html", "3 Using R Reproducibly 3.1 General Principles of Reproducibility 3.2 How do be more reproducible in R", " 3 Using R Reproducibly Most scientific work is iterative source: Wickham &amp; Grolemund: R for Data Science The process between input and output needs to be transparent and repeatable. 3.1 General Principles of Reproducibility 3.1.1 Don’t do things by hand Everything that happens between the raw data and final output should be captured in the script. “Point &amp; click” edits can’t be tracked, and it may be impossible to reverse any errors (rounding, copy/paste, overwriting). It can also be time consuming to re-do “by hand” edits. 3.1.2 Automate where you can Repeatitive tasks are prone to errors (and are inefficient). As a programmatic language, R is useful for many automation tasks. File manipulation file.create(), dir.create(), list.files(), file.copy(), write() Looped processing for(), while() Vectorized functions apply(), lappy(), Vectorize() Automation Example 1: File manipulation (file.create(), dir.create(), list.files(), file.copy(), write()) Lists all the files in a folder: list.files(&quot;~/Desktop&quot;) ## [1] &quot;Data.csv&quot; ## [2] &quot;Screen Shot 2017-08-18 at 8.23.29 AM.png&quot; ## [3] &quot;Screen Shot 2017-08-18 at 8.23.51 AM.png&quot; ## [4] &quot;Screenshots&quot; Creates a new folder on the desktop: dir.create(&quot;~/Desktop/New_Folder&quot;) Move file “Data.csv” into new folder: file.rename(from = &quot;~/Desktop/Data.csv&quot;, to =&quot;~/Desktop/New_Folder/Data.csv&quot;) list.files(&quot;~/Desktop&quot;) ## [1] &quot;New_Folder&quot; ## [2] &quot;Screen Shot 2017-08-18 at 8.23.29 AM.png&quot; ## [3] &quot;Screen Shot 2017-08-18 at 8.23.51 AM.png&quot; ## [4] &quot;Screenshots&quot; list.files(&quot;~/Desktop/New_Folder&quot;) ## [1] &quot;Data.csv&quot; R can ooping over mutiple files/items (for(), while()) ```r for (i in list.files()) { temp &lt;- read.csv(i) #processing steps here... write.csv(temp, file=paste(gsub(&quot;.csv&quot;, &quot;&quot;, i), &quot;processed.csv&quot;, sep=&quot;_&quot;)) } ``` * vectorized functions (apply(), lappy(), Vectorize()) paying attention to your inputs and outputs - all transformations should be done in the script. All outputs should be generated from commands in your script. don’t do things by hand don’t point and click - save the commands that result instead All you really need is your data + code 3.2 How do be more reproducible in R 3.2.1 Organization Use R projects, open .Rproj file - working directory, git and github add ons Mindful file names &amp; directory organization - use relative paths in your scripts (folders for raw data, for scripts, for plots, for reports, etc) Order matters in a script 3.2.2 Documentation Document each command with human readable comments (Markdown is a great way to do this); include metadata at top of file so you know what each script is doing Use white space in your scripts (it’s free) Try to make your code human friendly (example of dplyr versus base R), sections 3.2.3 Transparency IF you point and click in RStudio, always PASTE command into script Load all necessary data and libraries at the very begining of your script, pacman Use relative paths - reference working directory, rather than the long computer path Set seed when doing any random number generation Do not save your Workspace! Tell R not to ask you. Clear console/environment/restart R often to check yourself If you save any outputs, make sure they are done by your script. ggsave(), png(), pdf() 3.2.4 Openness &amp; Long-Term Preservation Consider using packrat for package dependecy management Share your data and code as widely as possible - github, CRAN, archival repositories "]
]
