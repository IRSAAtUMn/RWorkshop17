[
["index.html", "Introduction to Data Analysis with R &amp; Reproducible Data Science Home", " Introduction to Data Analysis with R &amp; Reproducible Data Science Institute for Research in Statistics and its Applications at the University of Minnesota Home With the increasing availability of data with broad applications (and the sheer size of some of these data), it is more important than ever to be able to elucidate trends, decisions, and stories from data. Our team will offer a hands on introduction to Data Science and Statistics using the free and publicly available software R. Assuming no background knowledge of software or Statistics, we will bring you up to speed on some of the most useful, modern, and popular data analysis techniques. This short course is divided into multiple modules. On day one we will explore the basic features of R and the power of R for constructing visualizations, summaries, hypothesis tests, and statistical models from data. The modules on day two will cover a gentle introduction to quantile regression and conclude with an in-depth discussion on best practices for reproducible Data Science research and practice using R Markdown and github. The material herein is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["introduction-to-r-rstudio.html", " 1 Introduction to R &amp; RStudio 1.1 Getting Started 1.2 Basic features 1.3 Getting Help 1.4 Working with data 1.5 Exercises", " 1 Introduction to R &amp; RStudio Consider the 4 V’s of Big Data: source: https://commons.wikimedia.org/wiki/File:Defining-big-data1.png This workshop is motivated in part by the increasing need for tools that can be used to elucidate trends, decisions, and stories from data. Whether your data are generated via simulation, collected via a survey, observed in a scientific experiment, scraped from the web, etc, you need software to explore and construct inferences from these data. In this workshop, we’ll use the R statistical software. Why R? it’s free it’s open source it’s flexible / useful for a wide variety of applications it has a huge online community it can be used to create reproducible documents, apps, books, etc. (In fact, this document was constructed within RStudio.) Workshop Outline &amp; Goals Our goal is to provide a quick introduction to the power of and principles behind using R for statistical analysis. You will walk away with a solid foundation upon which you can build in utilizing R for your own research. Day 1: Introduction to R &amp; RStudio Data Visualization Simple Statistics Linear Regression Day 2: Quantile Regression Github in R R Markdown Principles of Reproducible Research reproducible research / outline for workshop 1.1 Getting Started Before the workshop, you were asked to download/update both R &amp; RStudio: Download &amp; install R: https://mirror.las.iastate.edu/CRAN/ Download &amp; install RStudio: https://www.rstudio.com/products/rstudio/download/ Be sure to download the free version. Note that RStudio is an integrated development environment (IDE) for R, combining the power of R with extra automation tools. Once you open RStudio, you’ll see four panes, each serving a different function: 1.2 Basic features Using R as a calculator We can use R as a simple calculator. Try the following: 2 + 3 2 * 3 2^3 (2 + 3)^2 2 + 3^2 Comments Once you start saving your work, it’s helpful to comment your code. To this end, R ignores anything after #. #calculate 3 squared 3^2 Built-in functions R also includes built-in functions to which we supply arguments: function(arguments). sqrt(9) #the sum function calculates the sum of the listed numbers #does the order of arguments matter? sum(2, 3) sum(3, 2) #what does the rep function do? does the order of arguments matter? rep(2, 3) rep(3, 2) #some arguments also have names rep(x=3, times=2) rep(times=2, x=3) #is R case sensitive? eg: can we spell rep as Rep? Rep(2, 3) Assignment We can assign &amp; store R output. #store the result of rep(3, 2) as TwoThrees TwoThrees &lt;- rep(3, 2) #check out the results TwoThrees #do something to the results TwoThrees + 5 #Names cannot include spaces! try this: Two Threes &lt;- rep(3,2) 1.3 Getting Help Curious about what happens if you change R code in some way? Try it! Playing around with a function is the best way to learn about its functionality. Can’t remember the code you used in a past analysis? Search for it under the “History” tab in the upper right hand panel in RStudio. Did you make a mistake and don’t want to retype all of your work? Use the up arrow! You can access &amp; subsequently edit any previous line of code by using the up arrow. Don’t know what a certain function does or how it works? You have a couple of options: Use ? within RStudio to access help files. ?rep Google! There’s a massive RStudio community at http://stackoverflow.com/. If you have a question, somebody’s probably already written about it. 1.4 Working with data The following data were utilized in the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women” which analyzes movies that do/don’t pass the Bechdel test. A movie passes the test if it meets the following criteria: there are \\(\\ge 2\\) female characters the female characters talk to each other at least 1 time, they talk about something other than a male character Data Structure Tidy data tables have two key features: Each row represents a single observational unit of the sample. Each column represents a variable, ie. an attribute of the cases. The data are not treated like code. There are no extras - no row summaries, column summaries, data entry notes, comments, graphs, etc. All data manipulation should be done within R! All comments about the data collection, variables, etc should be provided in a separate code book. Question: What are the units of observation in the above data? What are the variables? Accessing / Importing Data Data are stored in countless different locations (eg: your computer, Google drive, Wiki, etc) and in countless formats (eg: xls, csv, tables, etc). Luckily for us, the Bechdel data are already stored within R in the fivethirtyeight package. In general, packages developed &amp; shared by R users provide specialized functions and data. If you didn’t install the fivethirtyeight package before the workshop, you’ll need to do so now: install.packages(&quot;fivethirtyeight&quot;, dependencies=TRUE) Once you install the package, you can load the package in your R session and access the bechdel data: library(fivethirtyeight) data(bechdel) You can also access the codebook for these data: ?bechdel Examining Data Structure in R Before we do any data analysis we have to understand the structure of our data. Try the following. #view the data table in a separate panel View(bechdel) #check out the first rows in the console head(bechdel) #obtain the data dimensions: rows x columns dim(bechdel) #get the variable names names(bechdel) Examining Specific Variables #to access a single variable use the $ notation bechdel$budget_2013 bechdel$clean_test #we can determine the levels/categories of category variables levels(factor(bechdel$clean_test)) levels(factor(bechdel$binary)) Subsetting Specific Units of Observation We can obtain a subset of observations that satisfy a criterion defined by a variable within the data set: #subset of movies with a 2013 budget under 1 million dollars Cheap &lt;- subset(bechdel, budget_2013&lt;1000000) dim(Cheap) head(Cheap) #subset of movies that fail the test Failures &lt;- subset(bechdel, binary==&quot;FAIL&quot;) dim(Failures) head(Failures) #subset of movies that EITHER have a budget under 1 million dollars OR fail the test CheapOrFail &lt;- subset(bechdel, budget_2013&lt;1000000 | binary==&quot;FALSE&quot;) dim(CheapOrFail) head(CheapOrFail) #subset of movies that BOTH have a budget under 1 million dollars AND fail the test CheapAndFail &lt;- subset(bechdel, budget_2013&lt;1000000 &amp; binary==&quot;FALSE&quot;) dim(CheapAndFail) head(CheapAndFail) Some useful syntax for subsetting: &lt; (less than), &lt;= (less than or equal to), &gt; (greater than), &gt;= (greater than or equal to), == (equal to) &amp; (and), | (or) 1.5 Exercises Let’s apply the above tools to the US_births_2000_2014 data within the fivethirtyeight package. These data were used in the fivethirtyeight.com article “Some People Are Too Superstitious To Have A Baby On Friday The 13th”. Load the data into your console and examine the codebook. View the data set in a separate panel. Check out the first 6 cases in your console. What are the units of observation (rows)? What are the variables? How much data do we have? What are the names of the variables? Access the day_of_week variable alone. What are the levels/category labels for this variable? Create a subset that contains only the births that occur on Fridays. Store this as OnlyFridays. Find the dimensions of this subset. Create a subset that contains only births in 2014. Store this as Only2014. Find the dimensions of this subset. Solutions: #1 library(fivethirtyeight) data(US_births_2000_2014) #2 View(US_births_2000_2014) #3 head(US_births_2000_2014) #4 #each row = a single day #variables include number of births, day of week, etc on that date #5 dim(US_births_2000_2014) #6 names(US_births_2000_2014) #7 US_births_2000_2014$day_of_week levels(factor(US_births_2000_2014$day_of_week)) #8 OnlyFridays &lt;- subset(US_births_2000_2014, day_of_week==&quot;Fri&quot;) dim(OnlyFridays) #9 Only2014 &lt;- subset(US_births_2000_2014, year==2014) dim(Only2014) "],
["data-visualization.html", " 2 Data Visualization 2.1 ggplot 2.2 Univariate visualizations 2.3 Visualizing Relationships 2.4 Exercises 2.5 Extra", " 2 Data Visualization The following data set on the 2016 election is stored as a csv file at https://www.macalester.edu/~ajohns24/data/IMAdata1.csv: This data set combines the county level election results provided by Tony McGovern (shared on github), county level demographic data from the df_county_demographics data set within the choroplethr R package, and historical information about red/blue/purple states. Let’s take a quick look: #use read.csv() to import the csv file election &lt;- read.csv(&quot;https://www.macalester.edu/~ajohns24/data/IMAdata1.csv&quot;) dim(election) #dimensions ## [1] 3143 34 head(election, 2) #first 2 rows ## region total_population percent_white percent_black percent_asian ## 1 1001 54907 76 18 1 ## 2 1003 187114 83 9 1 ## percent_hispanic per_capita_income median_rent median_age fips_code ## 1 2 24571 668 37.5 1001 ## 2 4 26766 693 41.5 1003 ## county total_2008 dem_2008 gop_2008 oth_2008 total_2012 ## 1 Autauga County 23641 6093 17403 145 23909 ## 2 Baldwin County 81413 19386 61271 756 84988 ## dem_2012 gop_2012 oth_2012 total_2016 dem_2016 gop_2016 oth_2016 ## 1 6354 17366 189 24661 5908 18110 643 ## 2 18329 65772 887 94090 18409 72780 2901 ## perdem_2016 perrep_2016 winrep_2016 perdem_2012 perrep_2012 ## 1 0.2396 0.7344 TRUE 0.2658 0.7263 ## 2 0.1957 0.7735 TRUE 0.2157 0.7739 ## winrep_2012 polyname abb StateColor value IncomeBracket ## 1 TRUE alabama AL red TRUE low ## 2 TRUE alabama AL red TRUE high names(election) #variable names ## [1] &quot;region&quot; &quot;total_population&quot; &quot;percent_white&quot; ## [4] &quot;percent_black&quot; &quot;percent_asian&quot; &quot;percent_hispanic&quot; ## [7] &quot;per_capita_income&quot; &quot;median_rent&quot; &quot;median_age&quot; ## [10] &quot;fips_code&quot; &quot;county&quot; &quot;total_2008&quot; ## [13] &quot;dem_2008&quot; &quot;gop_2008&quot; &quot;oth_2008&quot; ## [16] &quot;total_2012&quot; &quot;dem_2012&quot; &quot;gop_2012&quot; ## [19] &quot;oth_2012&quot; &quot;total_2016&quot; &quot;dem_2016&quot; ## [22] &quot;gop_2016&quot; &quot;oth_2016&quot; &quot;perdem_2016&quot; ## [25] &quot;perrep_2016&quot; &quot;winrep_2016&quot; &quot;perdem_2012&quot; ## [28] &quot;perrep_2012&quot; &quot;winrep_2012&quot; &quot;polyname&quot; ## [31] &quot;abb&quot; &quot;StateColor&quot; &quot;value&quot; ## [34] &quot;IncomeBracket&quot; Now that we understand the structure of this data set, we can start to ask some questions: To what degree did Trump support vary from county to county? In what number of counties did Trump win? What’s the relationship between Trump’s 2016 support and Romney’s 2012 support? What’s the relationship between Trump’s support and the “color” of the state in which the county exists? Visualizing the data is the first natural step in answering these questions. Why? Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What statistical tool / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. 2.1 ggplot We’ll construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package: library(ggplot2) The best way to learn about ggplot is to just play around. Don’t worry about memorizing the syntax. Rather, focus on the patterns and potential of their application. There’s a helpful cheat sheet for future reference: GGPLOT CHEAT SHEET 2.2 Univariate visualizations We’ll start with univariate visualizations. Categorical Variables Consider the categorical winrep_2016 variable which indicates whether Trump won the county: levels(factor(election$winrep_2016)) ## [1] &quot;FALSE&quot; &quot;TRUE&quot; A table provides a simple summary of the number of counties that fall into these 2 categories: table(election$winrep_2016) ## ## FALSE TRUE ## 487 2625 A bar chart provides a visualization of this table. Try out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot. #set up a plotting frame ggplot(election, aes(x=winrep_2016)) #add a layer with the bars ggplot(election, aes(x=winrep_2016)) + geom_bar() #add axis labels ggplot(election, aes(x=winrep_2016)) + geom_bar() + labs(x=&quot;Trump win&quot;, y=&quot;Number of counties&quot;) In summary: Quantitative Variables The quantitative perrep_2016 variable summarizes Trump’s percent of the vote in each county. Quantitative variables require different summary tools than categorical variables. We’ll explore 2 methods for graphing quantitative variables: histograms &amp; density plots. Histograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Try out the code below. #set up a plotting frame ggplot(election, aes(x=perrep_2016)) #add a histogram layer ggplot(election, aes(x=perrep_2016)) + geom_histogram() #add axis labels ggplot(election, aes(x=perrep_2016)) + geom_histogram() + labs(x=&quot;Trump vote (%)&quot;, y=&quot;Number of counties&quot;) #change the border colors ggplot(election, aes(x=perrep_2016)) + geom_histogram(color=&quot;white&quot;) + labs(x=&quot;Trump vote (%)&quot;, y=&quot;Number of counties&quot;) #change the bin width ggplot(election, aes(x=perrep_2016)) + geom_histogram(color=&quot;white&quot;, binwidth=0.10) + labs(x=&quot;Trump vote (%)&quot;, y=&quot;Number of counties&quot;) In summary: ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Density plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range. #set up the plotting frame ggplot(election, aes(x=perrep_2016)) #add a density curve ggplot(election, aes(x=perrep_2016)) + geom_density() #add axis labels ggplot(election, aes(x=perrep_2016)) + geom_density() + labs(x=&quot;Trump vote (%)&quot;) #add a fill color ggplot(election, aes(x=perrep_2016)) + geom_density(fill=&quot;red&quot;) + labs(x=&quot;Trump vote (%)&quot;) In summary: 2.3 Visualizing Relationships Consider the data on just 6 of the counties: Before constructing graphics of the relationships among these variables, we need to understand what features these graphics should have. Without peaking at the exercises, challenge yourself to think about how we might graph the relationships among the following sets of variables: perrep_2016 vs perrep_2012 perrep_2016 vs StateColor perrep_2016 vs perrep_2012 and StateColor (in 1 plot) perrep_2016 vs perrep_2012 and median_rent (in 1 plot) Run through the following exercises which introduce different approaches to visualizing relationships. Scatterplots of 2 quantitative variables Each quantitative variable has an axis. Each case is represented by a dot. #just a graphics frame ggplot(election, aes(y=perrep_2016, x=perrep_2012)) #add a scatterplot layer ggplot(election, aes(y=perrep_2016, x=perrep_2012)) + geom_point() #another predictor ggplot(election, aes(y=perrep_2016, x=median_rent)) + geom_point() In summary: Side-by-side plots of 1 quantitative variable vs 1 categorical variable #density plots by group ggplot(election, aes(x=perrep_2016, fill=StateColor)) + geom_density() #to see better: add transparency ggplot(election, aes(x=perrep_2016, fill=StateColor)) + geom_density(alpha=0.5) #fix the color scale! ggplot(election, aes(x=perrep_2016, fill=StateColor)) + geom_density(alpha=0.5) + scale_fill_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) #to see better: split groups into separate plots ggplot(election, aes(x=perrep_2016, fill=StateColor)) + geom_density(alpha=0.5) + facet_wrap( ~ StateColor) + scale_fill_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) In summary: Scatterplots of 1 quantitative variable vs 1 categorical &amp; 1 quantitative variable If median_rent and StateColor both explain some of the variability in perrep_2016, why not include both in our analysis?! Let’s. #scatterplot: id groups using color ggplot(election, aes(y=perrep_2016, x=median_rent, color=StateColor)) + geom_point(alpha=0.5) #fix the color scale! ggplot(election, aes(y=perrep_2016, x=median_rent, color=StateColor)) + geom_point(alpha=0.5) + scale_color_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) #scatterplot: id groups using shape ggplot(election, aes(y=perrep_2016, x=median_rent, shape=StateColor)) + geom_point(alpha=0.5) + scale_color_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) #scatterplot: split/facet by group ggplot(election, aes(y=perrep_2016, x=median_rent, color=StateColor)) + geom_point(alpha=0.5) + facet_wrap( ~ StateColor) + scale_color_manual(values=c(&quot;blue&quot;,&quot;purple&quot;,&quot;red&quot;)) In summary: Plots of 3 quantitative variables #scatterplot: represent third variable using color ggplot(election, aes(y=perrep_2016, x=median_rent, color=perrep_2012)) + geom_point(alpha=0.5) #scatterplot: discretize the third variable into 2 groups &amp; represent with color ggplot(election, aes(y=perrep_2016, x=median_rent, color=cut(perrep_2012,2))) + geom_point(alpha=0.5) In summary: 2.4 Exercises Recall the US_births_2000_2014 data in the fivethirtyeight package: library(fivethirtyeight) data(&quot;US_births_2000_2014&quot;) In the previous activity, we investigated the basic features of this data set: dim(US_births_2000_2014) ## [1] 5479 6 head(US_births_2000_2014) ## # A tibble: 6 x 6 ## year month date_of_month date day_of_week births ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;date&gt; &lt;ord&gt; &lt;int&gt; ## 1 2000 1 1 2000-01-01 Sat 9083 ## 2 2000 1 2 2000-01-02 Sun 8006 ## 3 2000 1 3 2000-01-03 Mon 11363 ## 4 2000 1 4 2000-01-04 Tues 13032 ## 5 2000 1 5 2000-01-05 Wed 12558 ## 6 2000 1 6 2000-01-06 Thurs 12466 names(US_births_2000_2014) ## [1] &quot;year&quot; &quot;month&quot; &quot;date_of_month&quot; &quot;date&quot; ## [5] &quot;day_of_week&quot; &quot;births&quot; levels(factor(US_births_2000_2014$day_of_week)) ## [1] &quot;Sun&quot; &quot;Mon&quot; &quot;Tues&quot; &quot;Wed&quot; &quot;Thurs&quot; &quot;Fri&quot; &quot;Sat&quot; Let’s graphically explore these variables and the relationships among them! NOTE: This set of exercises is inspired by the work of Randy Pruim for the MAA statPREP program. First, let’s focus on 2014: Only2014 &lt;- subset(US_births_2000_2014, year==2014) Construct a univariate visualization of births. Describe the variability in births from day to day in 2014. The time of year might explain some of this variability. Construct a plot that illustrates the relationship between births and date in 2014. NOTE: Make sure that births, our variable of interest, is on the y-axis and treat date as quantitative. One goofy thing that stands out are the 2-3 distinct groups of points. Add a layer to this plot that explains the distinction between these groups. There are some exceptions to the rule in exercise 3, ie. some cases that should belong to group 1 but behave like the cases in group 2. Explain why these cases are exceptions - what explains the anomalies / why these are special cases? Next, consider all births from 2000-2014. Construct 1 graphic that illustrates births trends across all of these years. Finally, consider only those births that occur on Fridays: OnlyFridays &lt;- subset(US_births_2000_2014, day_of_week==&quot;Fri&quot;) Define a new variable fri13 that indicates whether the case falls on a Friday in the 13th date of the month: OnlyFridays$fri13 &lt;- (OnlyFridays$date_of_month==13) Construct and comment on a plot of that illustrates the distribution of births among Fridays that fall on &amp; off the 13th. Do you see any evidence of superstition? 2.5 Extra We’ve covered some basic graphics. However, different types of relationships require different visualization strategies. For example, there’s a geographical component to the election data. If you have time, try to construct some maps of the election related variables. To this end, you’ll need to install the choroplethr and choroplethrMaps packages: install.packages(&quot;choroplethr&quot;, dependencies=TRUE) install.packages(&quot;choroplethrMaps&quot;, dependencies=TRUE) library(choroplethr) library(choroplethrMaps) #to make a map of Trump support store `perrep_2016` as value election$value &lt;- election$perrep_2016 county_choropleth(election) #a map of Trump wins election$value &lt;- election$winrep_2016 county_choropleth(election) #a map of state color election$value &lt;- election$StateColor county_choropleth(election) #a map of percent white election$value &lt;- election$percent_white county_choropleth(election) "]
]
